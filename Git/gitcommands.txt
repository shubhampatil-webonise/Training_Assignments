1) git-add - Add file contents to the index

Format : git add [-n] [-v] [--force | -f] [--interactive | -i] [--patch | -p]
                 [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update |
 -u]]
                 [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-
missing]
                 [--] [<pathspec>...]

 2)  git-bisect - Find by binary search the change that introduced a bug

 Format : git bisect <subcommand> <options>

 3) git-branch - List, create, or delete branches

 Format : git branch [--color[=<when>] | --no-color] [-r | -a]
               [--list] [-v [--abbrev=<length> | --no-abbrev]]
               [--column[=<options>] | --no-column]
               [(--merged | --no-merged | --contains) [<commit>]] [<pattern>...]
       git branch [--set-upstream | --track | --no-track] [-l] [-f] <branchname> [<start-point>]


 4) git-checkout - Checkout a branch or paths to the working tree

 Format : git checkout [-q] [-f] [-m] [<branch>]
       git checkout [-q] [-f] [-m] --detach [<branch>]
       git checkout [-q] [-f] [-m] [--detach] <commit>
       git checkout [-q] [-f] [-m] [[-b|-B|--orphan] <new_branch>] [<start_point>]
       git checkout [-f|--ours|--theirs|-m|--conflict=<style>] [<tree-ish>] [--] <paths>...
       git checkout [-p|--patch] [<tree-ish>] [--] [<paths>...]


 5) git-clone - Clone a repository into a new directory

 Format : git clone [--template=<template_directory>]
                 [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
                 [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
                 [--separate-git-dir <git dir>]
                 [--depth <depth>] [--[no-]single-branch]
                 [--recursive | --recurse-submodules] [--] <repository>
                 [<directory>]


 6) git-commit - Record changes to the repository

 Format : git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [-S[<keyid>]] [--] [<file>...]


 7) git-diff - Show changes between commits, commit and working tree, etc

 Format :  git diff [options] [<commit>] [--] [<path>...]
       git diff [options] --cached [<commit>] [--] [<path>...]
       git diff [options] <commit> <commit> [--] [<path>...]
       git diff [options] <blob> <blob>
       git diff [options] [--no-index] [--] <path> <path>

 8) git-fetch - Download objects and refs from another repository

 Format :  git fetch [<options>] [<repository> [<refspec>...]]
       git fetch [<options>] <group>
       git fetch --multiple [<options>] [(<repository> | <group>)...]
       git fetch --all [<options>]

9)  git-init - Create an empty Git repository or reinitialize an existing
       one

Format : git init [-q | --quiet] [--bare] [--template=<template_directory>]
                 [--separate-git-dir <git dir>]
                 [--shared[=<permissions>]] [directory]


 10) git-log - Show commit logs

 Format : git log [<options>] [<revision range>] [[--] <path>...]


11)  git-merge - Join two or more development histories together

Format : git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]
               [-s <strategy>] [-X <strategy-option>] [-S[<keyid>]]
               [--[no-]rerere-autoupdate] [-m <msg>] [<commit>...]
       git merge <msg> HEAD <commit>...
       git merge --abort


 12) git-pull - Fetch from and integrate with another repository or a local
       branch

 Format : git pull [options] [<repository> [<refspec>...]]


13) git-push - Update remote refs along with associated objects

Format : git push [--all | --mirror | --tags] [--follow-tags] [-n | --dry-run] [--receive-pack=<git-receive-pack>]
                  [--repo=<repository>] [-f | --force] [--prune] [-v | --verbose] [-u | --set-upstream]
                  [--force-with-lease[=<refname>[:<expect>]]]
                  [--no-verify] [<repository> [<refspec>...]]

 14)  git-rebase - Forward-port local commits to the updated upstream head

 Format : git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
               [<upstream>] [<branch>]
       git rebase [-i | --interactive] [options] [--exec <cmd>] [--onto <newbase>]
               --root [<branch>]
       git rebase --continue | --skip | --abort | --edit-todo

15) git-status - Show the working tree status

Format : git status [<options>...] [--] [<pathspec>...]

16)  git-tag - Create, list, delete or verify a tag object signed with GPG

Format : git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>]
               <tagname> [<commit> | <object>]
       git tag -d <tagname>...
       git tag [-n[<num>]] -l [--contains <commit>] [--points-at <object>]
               [--column[=<options>] | --no-column] [<pattern>...]
               [<pattern>...]
       git tag -v <tagname>...
